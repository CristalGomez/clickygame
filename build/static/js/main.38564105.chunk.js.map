{"version":3,"sources":["components/Navbar/index.js","components/CastCard/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["Navbar","react_default","a","createElement","className","this","props","score","hscoreTracker","Component","CastCard","src","image","width","height","id","onClick","clickTracker","Wrapper","children","App","state","cast","clickedCast","hscore","_this","indexOf","scoreIncrease","setState","resetGame","_this2","components_Wrapper","components_Navbar","map","components_CastCard","shuffle","shuffledCast","key","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"o0DAgBeA,gMAXX,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,8BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,UAA6BC,KAAKC,MAAMC,MAAxC,eAA2DF,KAAKC,MAAME,uBANvDC,oBCYNC,MAXf,SAAkBJ,GAChB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKL,EAAMM,MAAOC,MAAM,QAAQC,OAAO,QAAQC,GAAIT,EAAMS,GAC9DC,QAAS,kBACTV,EAAMW,aAAaX,EAAMS,eCFdG,MAJf,SAAiBZ,GACb,OAAOL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWE,EAAMa,kBCqD5BC,6MAhDbC,MAAQ,CACNd,MAAO,EACPe,OACAC,YAAa,GACbC,OAAQ,KAMVP,aAAe,SAAAF,GACb,IAAMQ,EAAcE,EAAKJ,MAAME,YAAYR,IAEC,IAAxCU,EAAKJ,MAAME,YAAYG,QAAQX,IACjCU,EAAKE,gBACLF,EAAKG,SAAS,CAAEL,iBAEhBE,EAAKI,qFAMA,IAAAC,EAAAzB,KACP,OACEJ,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,CACAzB,MAAOF,KAAKgB,MAAMd,MAClBiB,OAAQnB,KAAKgB,MAAMG,SAElBnB,KAAKgB,MAAMC,KAAKW,IAAI,SAAAX,GAAI,OACvBrB,EAAAC,EAAAC,cAAC+B,EAAD,CACEjB,aAAca,EAAKb,aACnBkB,QAASL,EAAKK,QACdC,aAAcN,EAAKM,aACnBT,cAAeG,EAAKH,cACpBE,UAAWC,EAAKD,UAChBd,GAAIO,EAAKP,GACTsB,IAAKf,EAAKP,GACVH,MAAOU,EAAKV,kBAxCNH,aCFlB6B,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.38564105.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n\n      <nav className=\"navbar\">\n      <p className=\"title\"> Greys Anatomy Memory Game</p>\n      <p className=\"score\">Score: {this.props.score} Highscore: {this.props.hscoreTracker}</p>\n      </nav>\n\n    );\n  }\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction CastCard(props) {\n  return (\n    <div className=\"card\">\n    <img src={props.image} width=\"270px\" height=\"240px\" id={props.id}\n    onClick={() =>\n    props.clickTracker(props.id)}/>\n    </div>\n\n  )\n}\n\nexport default CastCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props){\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport CastCard from \"./components/CastCard\";\nimport Wrapper from \"./components/Wrapper\"\nimport cast from \"./cast.json\";\n\n\nclass App extends Component {\n  state = {\n    score: 0,\n    cast,\n    clickedCast: [],\n    hscore: 0\n  };\n\n\n\n  \n  clickTracker = id => {\n    const clickedCast = this.state.clickedCast(id);\n\n    if (this.state.clickedCast.indexOf(id) === -1) {\n      this.scoreIncrease();\n      this.setState({ clickedCast })\n    } else {\n      this.resetGame()\n    }\n  }\n\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar \n        score={this.state.score} \n        hscore={this.state.hscore}></Navbar>\n\n        {this.state.cast.map(cast => (\n          <CastCard\n            clickTracker={this.clickTracker}\n            shuffle={this.shuffle}\n            shuffledCast={this.shuffledCast}\n            scoreIncrease={this.scoreIncrease}\n            resetGame={this.resetGame}\n            id={cast.id}\n            key={cast.id}\n            image={cast.image}\n          />\n        ))}\n      </Wrapper>\n    )\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}